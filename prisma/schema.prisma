// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  expenses       Expense[]
  incomes        Income[]
  budgets        Budget[]
  financialGoals FinancialGoal[]
  Goal           Goal[]
  Transaction    Transaction[]
}

model Expense {
  id          String   @id @default(uuid()) @db.Uuid
  amount      Float
  description String
  category    String
  date        DateTime
  userId      String   @db.Uuid
  user        User     @relation(fields: [userId], references: [id])
}

model Income {
  id          String   @id @default(uuid()) @db.Uuid
  amount      Float
  description String
  source      String
  date        DateTime
  userId      String   @db.Uuid
  user        User     @relation(fields: [userId], references: [id])
}

model Budget {
  id       String @id @default(uuid()) @db.Uuid
  category String
  amount   Float
  userId   String @db.Uuid
  user     User   @relation(fields: [userId], references: [id])
}

model FinancialGoal {
  id            String    @id @default(uuid()) @db.Uuid
  name          String
  targetAmount  Float
  currentAmount Float
  deadline      DateTime?
  userId        String    @db.Uuid
  user          User      @relation(fields: [userId], references: [id])
}

model Goal {
  id            String   @id @default(uuid()) @db.Uuid
  name          String
  category      String
  targetAmount  Float
  currentAmount Float
  deadline      DateTime
  userId        String   @db.Uuid
  user          User     @relation(fields: [userId], references: [id])
}

model Transaction {
  id          String   @id @default(uuid()) @db.Uuid
  description String
  amount      Float
  date        DateTime
  type        String // 'income' or 'expense'
  category    String
  userId      String   @db.Uuid
  user        User     @relation(fields: [userId], references: [id])
}
